#include <iostream>
using namespace std;

struct Node {
    int data, balanceFactor;
    Node *left, *right;
    
    Node(int value) {
        data = value;
        balanceFactor = 0;
        left = nullptr;
        right = nullptr;
    }
};

class AVL {
public:
    Node* root;
    
    AVL() {
        root = nullptr;
    }
    
    int height(Node* node) {
        if (!node) return 0;
        return 1 + max(height(node->left), height(node->right));
    }
    
    Node* rotateRight(Node* y) {
        Node* x = y->left;
        Node* T2 = x->right;
        x->right = y;
        y->left = T2;
        y->balanceFactor = height(y->left) - height(y->right);
        x->balanceFactor = height(x->left) - height(x->right);
        return x;
    }
    
    Node* rotateLeft(Node* x) {
        Node* y = x->right;
        Node* T2 = y->left;
        y->left = x;
        x->right = T2;
        x->balanceFactor = height(x->left) - height(x->right);
        y->balanceFactor = height(y->left) - height(y->right);
        return y;
    }
    
    Node* rotateLeftRight(Node* node) {
        node->left = rotateLeft(node->left);
        return rotateRight(node);
    }
    
    Node* rotateRightLeft(Node* node) {
        node->right = rotateRight(node->right);
        return rotateLeft(node);
    }
    
    Node* insert(Node* node, int value) {
        if (!node) return new Node(value);
        
        if (value < node->data)
            node->left = insert(node->left, value);
        else
            node->right = insert(node->right, value);
        
        node->balanceFactor = height(node->left) - height(node->right);
        
        // Balancing the tree
        if (node->balanceFactor > 1 && value < node->left->data)  // LL case
            return rotateRight(node);
        if (node->balanceFactor < -1 && value > node->right->data) // RR case
            return rotateLeft(node);
        if (node->balanceFactor > 1 && value > node->left->data)  // LR case
            return rotateLeftRight(node);
        if (node->balanceFactor < -1 && value < node->right->data) // RL case
            return rotateRightLeft(node);
        
        return node;
    }
    
    void insert(int value) {
        root = insert(root, value);
    }
    
    void inorderDisplay(Node* node) {
        if (!node) return;
        inorderDisplay(node->left);
        cout << node->data << " (BF: " << node->balanceFactor << ")\n";
        inorderDisplay(node->right);
    }
    
    void display() {
        inorderDisplay(root);
    }
};

int main() {
    AVL tree;
    int values[] = {10, 5, 15, 3, 7, 12, 18};
    for (int value : values) {
        tree.insert(value);
    }
    tree.display();
    return 0;
}
